Se citesc, ca parametri în linia de comanda, separati prin spatiu, mai multe numere
complexe de forma a+b*i și o operație, sub forma unui operator (+, - , *, /).

1. Sa se verifice dacă parametri citiți în linia de comanda, separați prin spațiu, reprezintă o
expresie aritmetica de forma:
                            𝑛1 𝑜𝑝 𝑛2 𝑜𝑝 … 𝑜𝑝 𝑛𝑘,
unde 𝑛1, 𝑛2 … 𝑛𝑘 sunt numere complexe de forma 𝑎 + 𝑏 ∗ 𝑖, iar 𝑜𝑝 este operatorul
dat.

2. Sugestii de proiectare.
Se vor defini clasele:
- NumarComplex, având ca atribute re, im de tip real, iar ca metode operatiile
definite pe multimea numerelor complexe: adunare, scadere, inmultire,
impartire si conjugatul.

- ComplexExpression, clasa abstracta, ce are ca atribute operation de tipul
Operation (enum având patru valori posibile: ADDITION, SUBSTRACTION,
MULTIPLICATION, DIVISION) si un vector (array) args de numere complexe, iar
ca metode, o metodă execute ce returneaza rezultatul expresiei aritmetice,
apeland pentru aceasta metoda abstractă executeOneOperation
[TemplateMethodDesignPattern].

Derivati din clasa ComplexExpressionclasele necesare pentru executia celor patru
tipuri de expresii, definite la punctul B.l., suprascriind, corespunzator tipului
operatiei dat (+,-,/,*), metoda executeOneOperation - executa o operatie din
insiruirea de operatii ale expresiei.

- ExpressionFactory (singleton) [SingletonDesignPattern]
[FactoryMethodDesignPattern] având metoda createExpression cu signatura:

public ComplexExpression createExpression(Operation operation, Complex[] args)

si care creează o expresie în funcție de valoarea parametrului operation (vezi
diagrama de clase).

- ExpressionParser care parsează expresia, verifică dacă este validă si
construiește, folosind un obiect de tipul ExpressionFactory, expresia
corespunzatoare operatorului dat.

LEGENDA:

[TemplateMethodDesignPattern]
Se defineste o clasa generalizata ABSTRACTA, din care se se mosteneste
si se redefinesc metodele particularizate

de exemplu in acest program avem clasa abstracta ComplexExpression din cauza unei metode abstracte
("executeOneOperation"), fiindca toti stim ca +,-,*,/ nu sunt echivalenta.
iar in functie de operatie este redefinita metoda executeOneOperation

aceasta ajuta pentru a avea un pseudo-polimorfism,
si ajuta sa nu avem cod duplicat "bad-smell"

[SingletonDesignPattern]
Se defineste o clasa care permite creearea unei singure instante
aceasta are un parametru static constant instance
un constructor privat si o metoda publica de returnare a parametrului

deci acest parametru este un parametru al clasei ("static") nu se poate modifica
("final") el este initializat de la inceput, iar alta instanta a acestei clase nu se poate
creea deoarece constructorul este privat.

in exemplul nostru acest concept il putem vedea in clasa ExpressionFactory


[FactoryMethodDesignPattern]
Factory Method este un model creational de proiectare care ofera o interfata pentru creearea de
obiecte intr-o superclasa dar permite subclaselor sa altereze/schimbe tipul obiectelor care v-or fii creeate.

in exemplul nostru avem interfata Factory unde putem calcula rezultatul a oricarei operatie intre doua numere
complexe bazandu-ne pe operatii (+,-,*,/)
